<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 开启注解配置 -->
    <context:annotation-config/>

    <!--   <aop:aspectj-autoproxy proxy-target-class="true"/> -->

    <!-- 可通过注解控制事务 -->
    <tx:annotation-driven/>

    <!-- 定义扫描的包 -->
    <context:component-scan base-package="com.jlo.service"/>
    <context:component-scan base-package="com.jlo.dao"/>

    <context:component-scan base-package="com.jlo.model"/>
    <context:component-scan base-package="com.jlo.serviceImpl"/>
    <context:component-scan base-package="com.jlo.util"/>

    <!-- 读取JDBC配置文件 -->
    <context:property-placeholder location="classpath*:jdbc.properties" ignore-unresolvable="true"/>

    <!--创建jdbc数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <!-- useUnicode=true&characterEncoding=utf8 添加这个可以保证中文不乱码  -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
    </bean>


    <!-- Session工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 指定实体类的包路径 -->
        <!--<property name="typeAliasesPackage" value="com.jlo.model" />-->
        <!-- 指定Mapper文件的路径  -->
        <property name="mapperLocations">
            <list>
                <value>classpath*:mappings/*Mapper.xml</value>
            </list>
        </property>
    </bean>

    <!-- 自动扫描mappar-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jlo.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 下面是配置声明式事务管理的 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--&lt;!&ndash; 初始化加载参数 &ndash;&gt;-->
    <!--<bean id="dataInitializer" class="com.jlo.util.DataInitializer" init-method="initMethod"-->
          <!--destroy-method="destroyMethod"/>-->

    <!-- 配置事务的级别和隔离机制 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="update*" rollback-for="Throwable" propagation="REQUIRED"/>
            <tx:method name="insert*" rollback-for="Throwable" propagation="REQUIRED"/>
            <tx:method name="create*" rollback-for="Throwable" propagation="REQUIRED"/>
            <tx:method name="add*" rollback-for="Throwable" propagation="REQUIRED"/>
            <tx:method name="cancel*" rollback-for="Throwable" propagation="REQUIRED"/>
            <tx:method name="doAccounts" rollback-for="Throwable" propagation="REQUIRED"/>
            <tx:method name="check*" rollback-for="Throwable" propagation="REQUIRED"/>
            <tx:method name="*" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务AOP配置 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.jlo.service..*.*(..))" id="txPointcut1"/>
        <aop:advisor pointcut-ref="txPointcut1" advice-ref="txAdvice"/>
    </aop:config>

    <!-- 引入redis服务配置文件 -->
    <import resource="classpath:redis-config.xml"/>
    <!-- 引入服务提供者配置文件 -->
    <import resource="classpath:dubbo-provider.xml"/>

</beans>
